{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "      <th>Drug</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>b128</td>\n",
       "      <td>0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "      <td>Capomulin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>f932</td>\n",
       "      <td>0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "      <td>Ketapril</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>g107</td>\n",
       "      <td>0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "      <td>Ketapril</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>a457</td>\n",
       "      <td>0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "      <td>Ketapril</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>c819</td>\n",
       "      <td>0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "      <td>Ketapril</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Mouse ID  Timepoint  Tumor Volume (mm3)  Metastatic Sites       Drug\n",
       "0     b128          0                45.0                 0  Capomulin\n",
       "1     f932          0                45.0                 0   Ketapril\n",
       "2     g107          0                45.0                 0   Ketapril\n",
       "3     a457          0                45.0                 0   Ketapril\n",
       "4     c819          0                45.0                 0   Ketapril"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Dependencies and Setup\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Hide warning messages in notebook\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "# File to Load (Remember to Change These)\n",
    "mouse_drug_data_to_load = \"mouse_drug_data.csv\"\n",
    "clinical_trial_data_to_load = \"clinicaltrial_data.csv\"\n",
    "\n",
    "# Read the Mouse and Drug Data and the Clinical Trial Data\n",
    "mouse = pd.read_csv(mouse_drug_data_to_load)\n",
    "\n",
    "\n",
    "clinical_data = pd.read_csv(clinical_trial_data_to_load)\n",
    "\n",
    "# Combine the data into a single dataset\n",
    "df = pd.merge(clinical_data, mouse, on=\"Mouse ID\", how=\"left\")\n",
    "len(df)\n",
    "# Display the data table for preview\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tumor Response to Treatment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Drug</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>5</td>\n",
       "      <td>44.266086</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>10</td>\n",
       "      <td>43.084291</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>15</td>\n",
       "      <td>42.064317</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>20</td>\n",
       "      <td>40.716325</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Drug  Timepoint  Tumor Volume (mm3)\n",
       "0  Capomulin          0           45.000000\n",
       "1  Capomulin          5           44.266086\n",
       "2  Capomulin         10           43.084291\n",
       "3  Capomulin         15           42.064317\n",
       "4  Capomulin         20           40.716325"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Store the Mean Tumor Volume Data Grouped by Drug and Timepoint \n",
    "drug_time_groups = df.groupby([\"Drug\",\"Timepoint\"])\n",
    "\n",
    "# Convert to DataFrame\n",
    "tumor_response_mean = drug_time_groups['Tumor Volume (mm3)'].mean()\n",
    "tumor_response_mean = tumor_response_mean.reset_index()\n",
    "\n",
    "# Preview DataFrame\n",
    "tumor_response_mean.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Drug</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>5</td>\n",
       "      <td>0.448593</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>10</td>\n",
       "      <td>0.702684</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>15</td>\n",
       "      <td>0.838617</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>20</td>\n",
       "      <td>0.909731</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Drug  Timepoint  Tumor Volume (mm3)\n",
       "0  Capomulin          0            0.000000\n",
       "1  Capomulin          5            0.448593\n",
       "2  Capomulin         10            0.702684\n",
       "3  Capomulin         15            0.838617\n",
       "4  Capomulin         20            0.909731"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Store the Standard Error of Tumor Volumes Grouped by Drug and Timepoint\n",
    "tumor_response_se = drug_time_groups['Tumor Volume (mm3)'].sem()\n",
    "tumor_response_se = tumor_response_se.reset_index()\n",
    "\n",
    "# Preview DataFrame\n",
    "tumor_response_se.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Drug</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Capomulin</th>\n",
       "      <th>Ceftamin</th>\n",
       "      <th>Infubinol</th>\n",
       "      <th>Ketapril</th>\n",
       "      <th>Naftisol</th>\n",
       "      <th>Placebo</th>\n",
       "      <th>Propriva</th>\n",
       "      <th>Ramicane</th>\n",
       "      <th>Stelasyn</th>\n",
       "      <th>Zoniferol</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5</td>\n",
       "      <td>44.266086</td>\n",
       "      <td>46.503051</td>\n",
       "      <td>47.062001</td>\n",
       "      <td>47.389175</td>\n",
       "      <td>46.796098</td>\n",
       "      <td>47.125589</td>\n",
       "      <td>47.248967</td>\n",
       "      <td>43.944859</td>\n",
       "      <td>47.527452</td>\n",
       "      <td>46.851818</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10</td>\n",
       "      <td>43.084291</td>\n",
       "      <td>48.285125</td>\n",
       "      <td>49.403909</td>\n",
       "      <td>49.582269</td>\n",
       "      <td>48.694210</td>\n",
       "      <td>49.423329</td>\n",
       "      <td>49.101541</td>\n",
       "      <td>42.531957</td>\n",
       "      <td>49.463844</td>\n",
       "      <td>48.689881</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>15</td>\n",
       "      <td>42.064317</td>\n",
       "      <td>50.094055</td>\n",
       "      <td>51.296397</td>\n",
       "      <td>52.399974</td>\n",
       "      <td>50.933018</td>\n",
       "      <td>51.359742</td>\n",
       "      <td>51.067318</td>\n",
       "      <td>41.495061</td>\n",
       "      <td>51.529409</td>\n",
       "      <td>50.779059</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>20</td>\n",
       "      <td>40.716325</td>\n",
       "      <td>52.157049</td>\n",
       "      <td>53.197691</td>\n",
       "      <td>54.920935</td>\n",
       "      <td>53.644087</td>\n",
       "      <td>54.364417</td>\n",
       "      <td>53.346737</td>\n",
       "      <td>40.238325</td>\n",
       "      <td>54.067395</td>\n",
       "      <td>53.170334</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>25</td>\n",
       "      <td>39.939528</td>\n",
       "      <td>54.287674</td>\n",
       "      <td>55.715252</td>\n",
       "      <td>57.678982</td>\n",
       "      <td>56.731968</td>\n",
       "      <td>57.482574</td>\n",
       "      <td>55.504138</td>\n",
       "      <td>38.974300</td>\n",
       "      <td>56.166123</td>\n",
       "      <td>55.432935</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>30</td>\n",
       "      <td>38.769339</td>\n",
       "      <td>56.769517</td>\n",
       "      <td>58.299397</td>\n",
       "      <td>60.994507</td>\n",
       "      <td>59.559509</td>\n",
       "      <td>59.809063</td>\n",
       "      <td>58.196374</td>\n",
       "      <td>38.703137</td>\n",
       "      <td>59.826738</td>\n",
       "      <td>57.713531</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>35</td>\n",
       "      <td>37.816839</td>\n",
       "      <td>58.827548</td>\n",
       "      <td>60.742461</td>\n",
       "      <td>63.371686</td>\n",
       "      <td>62.685087</td>\n",
       "      <td>62.420615</td>\n",
       "      <td>60.350199</td>\n",
       "      <td>37.451996</td>\n",
       "      <td>62.440699</td>\n",
       "      <td>60.089372</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>40</td>\n",
       "      <td>36.958001</td>\n",
       "      <td>61.467895</td>\n",
       "      <td>63.162824</td>\n",
       "      <td>66.068580</td>\n",
       "      <td>65.600754</td>\n",
       "      <td>65.052675</td>\n",
       "      <td>63.045537</td>\n",
       "      <td>36.574081</td>\n",
       "      <td>65.356386</td>\n",
       "      <td>62.916692</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>45</td>\n",
       "      <td>36.236114</td>\n",
       "      <td>64.132421</td>\n",
       "      <td>65.755562</td>\n",
       "      <td>70.662958</td>\n",
       "      <td>69.265506</td>\n",
       "      <td>68.084082</td>\n",
       "      <td>66.258529</td>\n",
       "      <td>34.955595</td>\n",
       "      <td>68.438310</td>\n",
       "      <td>65.960888</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Drug  Timepoint  Capomulin   Ceftamin  Infubinol   Ketapril   Naftisol  \\\n",
       "0             0  45.000000  45.000000  45.000000  45.000000  45.000000   \n",
       "1             5  44.266086  46.503051  47.062001  47.389175  46.796098   \n",
       "2            10  43.084291  48.285125  49.403909  49.582269  48.694210   \n",
       "3            15  42.064317  50.094055  51.296397  52.399974  50.933018   \n",
       "4            20  40.716325  52.157049  53.197691  54.920935  53.644087   \n",
       "5            25  39.939528  54.287674  55.715252  57.678982  56.731968   \n",
       "6            30  38.769339  56.769517  58.299397  60.994507  59.559509   \n",
       "7            35  37.816839  58.827548  60.742461  63.371686  62.685087   \n",
       "8            40  36.958001  61.467895  63.162824  66.068580  65.600754   \n",
       "9            45  36.236114  64.132421  65.755562  70.662958  69.265506   \n",
       "\n",
       "Drug    Placebo   Propriva   Ramicane   Stelasyn  Zoniferol  \n",
       "0     45.000000  45.000000  45.000000  45.000000  45.000000  \n",
       "1     47.125589  47.248967  43.944859  47.527452  46.851818  \n",
       "2     49.423329  49.101541  42.531957  49.463844  48.689881  \n",
       "3     51.359742  51.067318  41.495061  51.529409  50.779059  \n",
       "4     54.364417  53.346737  40.238325  54.067395  53.170334  \n",
       "5     57.482574  55.504138  38.974300  56.166123  55.432935  \n",
       "6     59.809063  58.196374  38.703137  59.826738  57.713531  \n",
       "7     62.420615  60.350199  37.451996  62.440699  60.089372  \n",
       "8     65.052675  63.045537  36.574081  65.356386  62.916692  \n",
       "9     68.084082  66.258529  34.955595  68.438310  65.960888  "
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Minor Data Munging to Re-Format the Data Frames\n",
    "tr_group_mean = tumor_response_mean.groupby(['Timepoint','Drug'])['Tumor Volume (mm3)'].aggregate('first').unstack()\n",
    "tr_group_mean = tr_group_mean.reset_index()\n",
    "# Preview that Reformatting worked\n",
    "tr_group_mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Drug</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Capomulin</th>\n",
       "      <th>Ceftamin</th>\n",
       "      <th>Infubinol</th>\n",
       "      <th>Ketapril</th>\n",
       "      <th>Naftisol</th>\n",
       "      <th>Placebo</th>\n",
       "      <th>Propriva</th>\n",
       "      <th>Ramicane</th>\n",
       "      <th>Stelasyn</th>\n",
       "      <th>Zoniferol</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5</td>\n",
       "      <td>0.448593</td>\n",
       "      <td>0.164505</td>\n",
       "      <td>0.235102</td>\n",
       "      <td>0.264819</td>\n",
       "      <td>0.202385</td>\n",
       "      <td>0.218091</td>\n",
       "      <td>0.231708</td>\n",
       "      <td>0.482955</td>\n",
       "      <td>0.239862</td>\n",
       "      <td>0.188950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10</td>\n",
       "      <td>0.702684</td>\n",
       "      <td>0.236144</td>\n",
       "      <td>0.282346</td>\n",
       "      <td>0.357421</td>\n",
       "      <td>0.319415</td>\n",
       "      <td>0.402064</td>\n",
       "      <td>0.376195</td>\n",
       "      <td>0.720225</td>\n",
       "      <td>0.433678</td>\n",
       "      <td>0.263949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>15</td>\n",
       "      <td>0.838617</td>\n",
       "      <td>0.332053</td>\n",
       "      <td>0.357705</td>\n",
       "      <td>0.580268</td>\n",
       "      <td>0.444378</td>\n",
       "      <td>0.614461</td>\n",
       "      <td>0.466109</td>\n",
       "      <td>0.770432</td>\n",
       "      <td>0.493261</td>\n",
       "      <td>0.370544</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>20</td>\n",
       "      <td>0.909731</td>\n",
       "      <td>0.359482</td>\n",
       "      <td>0.476210</td>\n",
       "      <td>0.726484</td>\n",
       "      <td>0.595260</td>\n",
       "      <td>0.839609</td>\n",
       "      <td>0.555181</td>\n",
       "      <td>0.786199</td>\n",
       "      <td>0.621889</td>\n",
       "      <td>0.533182</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Drug  Timepoint  Capomulin  Ceftamin  Infubinol  Ketapril  Naftisol   Placebo  \\\n",
       "0             0   0.000000  0.000000   0.000000  0.000000  0.000000  0.000000   \n",
       "1             5   0.448593  0.164505   0.235102  0.264819  0.202385  0.218091   \n",
       "2            10   0.702684  0.236144   0.282346  0.357421  0.319415  0.402064   \n",
       "3            15   0.838617  0.332053   0.357705  0.580268  0.444378  0.614461   \n",
       "4            20   0.909731  0.359482   0.476210  0.726484  0.595260  0.839609   \n",
       "\n",
       "Drug  Propriva  Ramicane  Stelasyn  Zoniferol  \n",
       "0     0.000000  0.000000  0.000000   0.000000  \n",
       "1     0.231708  0.482955  0.239862   0.188950  \n",
       "2     0.376195  0.720225  0.433678   0.263949  \n",
       "3     0.466109  0.770432  0.493261   0.370544  \n",
       "4     0.555181  0.786199  0.621889   0.533182  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tr_group_se = tumor_response_se.groupby(['Timepoint','Drug'])['Tumor Volume (mm3)'].aggregate('first').unstack()\n",
    "# Preview that Reformatting worked\n",
    "tr_group_se = tr_group_se.reset_index()\n",
    "tr_group_se.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate the Plot (with Error Bars)\n",
    "x= tr_group_mean[\"Timepoint\"]\n",
    "Capomulin_y = tr_group_mean[\"Capomulin\"]\n",
    "Infubinol_y = tr_group_mean[\"Infubinol\"]\n",
    "Ketapril_y = tr_group_mean[\"Ketapril\"]\n",
    "Placebo_y = tr_group_mean[\"Placebo\"]\n",
    "\n",
    "Capomulin_e = tr_group_se[\"Capomulin\"]\n",
    "Infubinol_e = tr_group_se[\"Infubinol\"]\n",
    "Ketapril_e = tr_group_se[\"Ketapril\"]\n",
    "Placebo_e = tr_group_se[\"Placebo\"]\n",
    "\n",
    "plt.errorbar(x, Capomulin_y, yerr=Capomulin_e, color='red', label=\"Capomulin\")\n",
    "plt.errorbar(x, Infubinol_y, yerr=Infubinol_e, color='blue', label=\"Infubinol\")\n",
    "plt.errorbar(x, Ketapril_y, yerr=Ketapril_e, color='green', label=\"Ketapril\")\n",
    "plt.errorbar(x, Placebo_y, yerr=Placebo_e, color='black', label=\"Placebo\")\n",
    "\n",
    "plt.xlabel(\"Time\")\n",
    "plt.ylabel(\"Tumor Volume (mm3)\")\n",
    "plt.title(\"Tumor Response to Treatment\")\n",
    "plt.legend(loc=\"best\")\n",
    "plt.grid()\n",
    "\n",
    "# Save the Figure\n",
    "plt.savefig('tumor_response_to_treatment.png')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Show the Figure\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Metastatic Response to Treatment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Drug</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>5</td>\n",
       "      <td>0.160000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>10</td>\n",
       "      <td>0.320000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>15</td>\n",
       "      <td>0.375000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>20</td>\n",
       "      <td>0.652174</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Drug  Timepoint  Metastatic Sites\n",
       "0  Capomulin          0          0.000000\n",
       "1  Capomulin          5          0.160000\n",
       "2  Capomulin         10          0.320000\n",
       "3  Capomulin         15          0.375000\n",
       "4  Capomulin         20          0.652174"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Store the Mean Met. Site Data Grouped by Drug and Timepoint \n",
    "met_site_mean = drug_time_groups['Metastatic Sites'].mean()\n",
    "met_site_mean = met_site_mean.reset_index()\n",
    "\n",
    "# Preview DataFrame\n",
    "met_site_mean.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Drug</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>5</td>\n",
       "      <td>0.074833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>10</td>\n",
       "      <td>0.125433</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>15</td>\n",
       "      <td>0.132048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>20</td>\n",
       "      <td>0.161621</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Drug  Timepoint  Metastatic Sites\n",
       "0  Capomulin          0          0.000000\n",
       "1  Capomulin          5          0.074833\n",
       "2  Capomulin         10          0.125433\n",
       "3  Capomulin         15          0.132048\n",
       "4  Capomulin         20          0.161621"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Store the Standard Error associated with Met. Sites Grouped by Drug and Timepoint \n",
    "met_site_se = drug_time_groups['Metastatic Sites'].sem()\n",
    "met_site_se = met_site_se.reset_index()\n",
    "\n",
    "# Preview DataFrame\n",
    "met_site_se.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Drug</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Capomulin</th>\n",
       "      <th>Ceftamin</th>\n",
       "      <th>Infubinol</th>\n",
       "      <th>Ketapril</th>\n",
       "      <th>Naftisol</th>\n",
       "      <th>Placebo</th>\n",
       "      <th>Propriva</th>\n",
       "      <th>Ramicane</th>\n",
       "      <th>Stelasyn</th>\n",
       "      <th>Zoniferol</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5</td>\n",
       "      <td>0.160000</td>\n",
       "      <td>0.380952</td>\n",
       "      <td>0.280000</td>\n",
       "      <td>0.304348</td>\n",
       "      <td>0.260870</td>\n",
       "      <td>0.375000</td>\n",
       "      <td>0.320000</td>\n",
       "      <td>0.120000</td>\n",
       "      <td>0.240000</td>\n",
       "      <td>0.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10</td>\n",
       "      <td>0.320000</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.590909</td>\n",
       "      <td>0.523810</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.565217</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>0.478261</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>15</td>\n",
       "      <td>0.375000</td>\n",
       "      <td>0.789474</td>\n",
       "      <td>0.904762</td>\n",
       "      <td>0.842105</td>\n",
       "      <td>0.857143</td>\n",
       "      <td>1.250000</td>\n",
       "      <td>0.764706</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.782609</td>\n",
       "      <td>0.809524</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>20</td>\n",
       "      <td>0.652174</td>\n",
       "      <td>1.111111</td>\n",
       "      <td>1.050000</td>\n",
       "      <td>1.210526</td>\n",
       "      <td>1.150000</td>\n",
       "      <td>1.526316</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.347826</td>\n",
       "      <td>0.952381</td>\n",
       "      <td>1.294118</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Drug  Timepoint  Capomulin  Ceftamin  Infubinol  Ketapril  Naftisol   Placebo  \\\n",
       "0             0   0.000000  0.000000   0.000000  0.000000  0.000000  0.000000   \n",
       "1             5   0.160000  0.380952   0.280000  0.304348  0.260870  0.375000   \n",
       "2            10   0.320000  0.600000   0.666667  0.590909  0.523810  0.833333   \n",
       "3            15   0.375000  0.789474   0.904762  0.842105  0.857143  1.250000   \n",
       "4            20   0.652174  1.111111   1.050000  1.210526  1.150000  1.526316   \n",
       "\n",
       "Drug  Propriva  Ramicane  Stelasyn  Zoniferol  \n",
       "0     0.000000  0.000000  0.000000   0.000000  \n",
       "1     0.320000  0.120000  0.240000   0.166667  \n",
       "2     0.565217  0.250000  0.478261   0.500000  \n",
       "3     0.764706  0.333333  0.782609   0.809524  \n",
       "4     1.000000  0.347826  0.952381   1.294118  "
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Minor Data Munging to Re-Format the Data Frames\n",
    "ms_group_mean = met_site_mean.groupby(['Timepoint','Drug'])['Metastatic Sites'].aggregate('first').unstack()\n",
    "ms_group_mean = ms_group_mean.reset_index()\n",
    "# Preview that Reformatting worked\n",
    "ms_group_mean.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Drug</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Capomulin</th>\n",
       "      <th>Ceftamin</th>\n",
       "      <th>Infubinol</th>\n",
       "      <th>Ketapril</th>\n",
       "      <th>Naftisol</th>\n",
       "      <th>Placebo</th>\n",
       "      <th>Propriva</th>\n",
       "      <th>Ramicane</th>\n",
       "      <th>Stelasyn</th>\n",
       "      <th>Zoniferol</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5</td>\n",
       "      <td>0.074833</td>\n",
       "      <td>0.108588</td>\n",
       "      <td>0.091652</td>\n",
       "      <td>0.098100</td>\n",
       "      <td>0.093618</td>\n",
       "      <td>0.100947</td>\n",
       "      <td>0.095219</td>\n",
       "      <td>0.066332</td>\n",
       "      <td>0.087178</td>\n",
       "      <td>0.077709</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10</td>\n",
       "      <td>0.125433</td>\n",
       "      <td>0.152177</td>\n",
       "      <td>0.159364</td>\n",
       "      <td>0.142018</td>\n",
       "      <td>0.163577</td>\n",
       "      <td>0.115261</td>\n",
       "      <td>0.105690</td>\n",
       "      <td>0.090289</td>\n",
       "      <td>0.123672</td>\n",
       "      <td>0.109109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>15</td>\n",
       "      <td>0.132048</td>\n",
       "      <td>0.180625</td>\n",
       "      <td>0.194015</td>\n",
       "      <td>0.191381</td>\n",
       "      <td>0.158651</td>\n",
       "      <td>0.190221</td>\n",
       "      <td>0.136377</td>\n",
       "      <td>0.115261</td>\n",
       "      <td>0.153439</td>\n",
       "      <td>0.111677</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>20</td>\n",
       "      <td>0.161621</td>\n",
       "      <td>0.241034</td>\n",
       "      <td>0.234801</td>\n",
       "      <td>0.236680</td>\n",
       "      <td>0.181731</td>\n",
       "      <td>0.234064</td>\n",
       "      <td>0.171499</td>\n",
       "      <td>0.119430</td>\n",
       "      <td>0.200905</td>\n",
       "      <td>0.166378</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Drug  Timepoint  Capomulin  Ceftamin  Infubinol  Ketapril  Naftisol   Placebo  \\\n",
       "0             0   0.000000  0.000000   0.000000  0.000000  0.000000  0.000000   \n",
       "1             5   0.074833  0.108588   0.091652  0.098100  0.093618  0.100947   \n",
       "2            10   0.125433  0.152177   0.159364  0.142018  0.163577  0.115261   \n",
       "3            15   0.132048  0.180625   0.194015  0.191381  0.158651  0.190221   \n",
       "4            20   0.161621  0.241034   0.234801  0.236680  0.181731  0.234064   \n",
       "\n",
       "Drug  Propriva  Ramicane  Stelasyn  Zoniferol  \n",
       "0     0.000000  0.000000  0.000000   0.000000  \n",
       "1     0.095219  0.066332  0.087178   0.077709  \n",
       "2     0.105690  0.090289  0.123672   0.109109  \n",
       "3     0.136377  0.115261  0.153439   0.111677  \n",
       "4     0.171499  0.119430  0.200905   0.166378  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Minor Data Munging to Re-Format the Data Frames\n",
    "ms_group_se = met_site_se.groupby(['Timepoint','Drug'])['Metastatic Sites'].aggregate('first').unstack()\n",
    "ms_group_se = ms_group_se.reset_index()\n",
    "# Preview that Reformatting worked\n",
    "ms_group_se.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate the Plot (with Error Bars)\n",
    "x= ms_group_mean[\"Timepoint\"]\n",
    "Capomulin_y = ms_group_mean[\"Capomulin\"]\n",
    "Infubinol_y = ms_group_mean[\"Infubinol\"]\n",
    "Ketapril_y = ms_group_mean[\"Ketapril\"]\n",
    "Placebo_y = ms_group_mean[\"Placebo\"]\n",
    "\n",
    "Capomulin_e = ms_group_se[\"Capomulin\"]\n",
    "Infubinol_e = ms_group_se[\"Infubinol\"]\n",
    "Ketapril_e = ms_group_se[\"Ketapril\"]\n",
    "Placebo_e = ms_group_se[\"Placebo\"]\n",
    "\n",
    "plt.errorbar(x, Capomulin_y, yerr=Capomulin_e, color='red', label=\"Capomulin\")\n",
    "plt.errorbar(x, Infubinol_y, yerr=Infubinol_e, color='blue', label=\"Infubinol\")\n",
    "plt.errorbar(x, Ketapril_y, yerr=Ketapril_e, color='green', label=\"Ketapril\")\n",
    "plt.errorbar(x, Placebo_y, yerr=Placebo_e, color='black', label=\"Placebo\")\n",
    "\n",
    "plt.xlabel(\"Time\")\n",
    "plt.ylabel(\"Metastatic Sites\")\n",
    "plt.title(\"Metastatic Response to Treatment\")\n",
    "plt.legend(loc=\"best\")\n",
    "plt.grid()\n",
    "\n",
    "# Save the Figure\n",
    "plt.savefig('metastatic_response_to_treatment.png')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Survival Rates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Drug</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Mouse Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>0</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>5</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>10</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>15</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>20</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Drug  Timepoint  Mouse Count\n",
       "0  Capomulin          0           25\n",
       "1  Capomulin          5           25\n",
       "2  Capomulin         10           25\n",
       "3  Capomulin         15           24\n",
       "4  Capomulin         20           23"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Store the Count of Mice Grouped by Drug and Timepoint (We can pass any metric)\n",
    "mouse_count = drug_time_groups['Metastatic Sites'].count()\n",
    "mouse_count = mouse_count.reset_index()\n",
    "mouse_count = mouse_count.rename(columns = {\"Metastatic Sites\":'Mouse Count'})\n",
    "\n",
    "# Preview DataFrame\n",
    "mouse_count.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Drug</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Capomulin</th>\n",
       "      <th>Ceftamin</th>\n",
       "      <th>Infubinol</th>\n",
       "      <th>Ketapril</th>\n",
       "      <th>Naftisol</th>\n",
       "      <th>Placebo</th>\n",
       "      <th>Propriva</th>\n",
       "      <th>Ramicane</th>\n",
       "      <th>Stelasyn</th>\n",
       "      <th>Zoniferol</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>26</td>\n",
       "      <td>25</td>\n",
       "      <td>26</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5</td>\n",
       "      <td>25</td>\n",
       "      <td>21</td>\n",
       "      <td>25</td>\n",
       "      <td>23</td>\n",
       "      <td>23</td>\n",
       "      <td>24</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10</td>\n",
       "      <td>25</td>\n",
       "      <td>20</td>\n",
       "      <td>21</td>\n",
       "      <td>22</td>\n",
       "      <td>21</td>\n",
       "      <td>24</td>\n",
       "      <td>23</td>\n",
       "      <td>24</td>\n",
       "      <td>23</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>15</td>\n",
       "      <td>24</td>\n",
       "      <td>19</td>\n",
       "      <td>21</td>\n",
       "      <td>19</td>\n",
       "      <td>21</td>\n",
       "      <td>20</td>\n",
       "      <td>17</td>\n",
       "      <td>24</td>\n",
       "      <td>23</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>20</td>\n",
       "      <td>23</td>\n",
       "      <td>18</td>\n",
       "      <td>20</td>\n",
       "      <td>19</td>\n",
       "      <td>20</td>\n",
       "      <td>19</td>\n",
       "      <td>17</td>\n",
       "      <td>23</td>\n",
       "      <td>21</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>25</td>\n",
       "      <td>22</td>\n",
       "      <td>18</td>\n",
       "      <td>18</td>\n",
       "      <td>19</td>\n",
       "      <td>18</td>\n",
       "      <td>17</td>\n",
       "      <td>14</td>\n",
       "      <td>23</td>\n",
       "      <td>19</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>30</td>\n",
       "      <td>22</td>\n",
       "      <td>16</td>\n",
       "      <td>17</td>\n",
       "      <td>18</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>13</td>\n",
       "      <td>23</td>\n",
       "      <td>18</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>35</td>\n",
       "      <td>22</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "      <td>17</td>\n",
       "      <td>15</td>\n",
       "      <td>14</td>\n",
       "      <td>10</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>40</td>\n",
       "      <td>21</td>\n",
       "      <td>14</td>\n",
       "      <td>10</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>12</td>\n",
       "      <td>9</td>\n",
       "      <td>20</td>\n",
       "      <td>12</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>45</td>\n",
       "      <td>21</td>\n",
       "      <td>13</td>\n",
       "      <td>9</td>\n",
       "      <td>11</td>\n",
       "      <td>13</td>\n",
       "      <td>11</td>\n",
       "      <td>7</td>\n",
       "      <td>20</td>\n",
       "      <td>11</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Drug  Timepoint  Capomulin  Ceftamin  Infubinol  Ketapril  Naftisol  Placebo  \\\n",
       "0             0         25        25         25        25        25       25   \n",
       "1             5         25        21         25        23        23       24   \n",
       "2            10         25        20         21        22        21       24   \n",
       "3            15         24        19         21        19        21       20   \n",
       "4            20         23        18         20        19        20       19   \n",
       "5            25         22        18         18        19        18       17   \n",
       "6            30         22        16         17        18        15       15   \n",
       "7            35         22        14         12        17        15       14   \n",
       "8            40         21        14         10        15        15       12   \n",
       "9            45         21        13          9        11        13       11   \n",
       "\n",
       "Drug  Propriva  Ramicane  Stelasyn  Zoniferol  \n",
       "0           26        25        26         25  \n",
       "1           25        25        25         24  \n",
       "2           23        24        23         22  \n",
       "3           17        24        23         21  \n",
       "4           17        23        21         17  \n",
       "5           14        23        19         16  \n",
       "6           13        23        18         15  \n",
       "7           10        21        16         14  \n",
       "8            9        20        12         14  \n",
       "9            7        20        11         14  "
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mouse_group = mouse_count.groupby(['Timepoint','Drug'])['Mouse Count'].aggregate('first').unstack()\n",
    "mouse_group = mouse_group.reset_index()\n",
    "# Preview that Reformatting worked\n",
    "mouse_group"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Drug</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Capomulin</th>\n",
       "      <th>Ceftamin</th>\n",
       "      <th>Infubinol</th>\n",
       "      <th>Ketapril</th>\n",
       "      <th>Naftisol</th>\n",
       "      <th>Placebo</th>\n",
       "      <th>Propriva</th>\n",
       "      <th>Ramicane</th>\n",
       "      <th>Stelasyn</th>\n",
       "      <th>Zoniferol</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>25</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>25</td>\n",
       "      <td>100.0</td>\n",
       "      <td>26</td>\n",
       "      <td>25</td>\n",
       "      <td>26</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5</td>\n",
       "      <td>100.0</td>\n",
       "      <td>21</td>\n",
       "      <td>100.0</td>\n",
       "      <td>92.0</td>\n",
       "      <td>23</td>\n",
       "      <td>96.0</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10</td>\n",
       "      <td>100.0</td>\n",
       "      <td>20</td>\n",
       "      <td>84.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>21</td>\n",
       "      <td>96.0</td>\n",
       "      <td>23</td>\n",
       "      <td>24</td>\n",
       "      <td>23</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>15</td>\n",
       "      <td>96.0</td>\n",
       "      <td>19</td>\n",
       "      <td>84.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>21</td>\n",
       "      <td>80.0</td>\n",
       "      <td>17</td>\n",
       "      <td>24</td>\n",
       "      <td>23</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>20</td>\n",
       "      <td>92.0</td>\n",
       "      <td>18</td>\n",
       "      <td>80.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>20</td>\n",
       "      <td>76.0</td>\n",
       "      <td>17</td>\n",
       "      <td>23</td>\n",
       "      <td>21</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>25</td>\n",
       "      <td>88.0</td>\n",
       "      <td>18</td>\n",
       "      <td>72.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>18</td>\n",
       "      <td>68.0</td>\n",
       "      <td>14</td>\n",
       "      <td>23</td>\n",
       "      <td>19</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>30</td>\n",
       "      <td>88.0</td>\n",
       "      <td>16</td>\n",
       "      <td>68.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>15</td>\n",
       "      <td>60.0</td>\n",
       "      <td>13</td>\n",
       "      <td>23</td>\n",
       "      <td>18</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>35</td>\n",
       "      <td>88.0</td>\n",
       "      <td>14</td>\n",
       "      <td>48.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>15</td>\n",
       "      <td>56.0</td>\n",
       "      <td>10</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>40</td>\n",
       "      <td>84.0</td>\n",
       "      <td>14</td>\n",
       "      <td>40.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>15</td>\n",
       "      <td>48.0</td>\n",
       "      <td>9</td>\n",
       "      <td>20</td>\n",
       "      <td>12</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>45</td>\n",
       "      <td>84.0</td>\n",
       "      <td>13</td>\n",
       "      <td>36.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>13</td>\n",
       "      <td>44.0</td>\n",
       "      <td>7</td>\n",
       "      <td>20</td>\n",
       "      <td>11</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Drug  Timepoint  Capomulin  Ceftamin  Infubinol  Ketapril  Naftisol  Placebo  \\\n",
       "0             0      100.0        25      100.0     100.0        25    100.0   \n",
       "1             5      100.0        21      100.0      92.0        23     96.0   \n",
       "2            10      100.0        20       84.0      88.0        21     96.0   \n",
       "3            15       96.0        19       84.0      76.0        21     80.0   \n",
       "4            20       92.0        18       80.0      76.0        20     76.0   \n",
       "5            25       88.0        18       72.0      76.0        18     68.0   \n",
       "6            30       88.0        16       68.0      72.0        15     60.0   \n",
       "7            35       88.0        14       48.0      68.0        15     56.0   \n",
       "8            40       84.0        14       40.0      60.0        15     48.0   \n",
       "9            45       84.0        13       36.0      44.0        13     44.0   \n",
       "\n",
       "Drug  Propriva  Ramicane  Stelasyn  Zoniferol  \n",
       "0           26        25        26         25  \n",
       "1           25        25        25         24  \n",
       "2           23        24        23         22  \n",
       "3           17        24        23         21  \n",
       "4           17        23        21         17  \n",
       "5           14        23        19         16  \n",
       "6           13        23        18         15  \n",
       "7           10        21        16         14  \n",
       "8            9        20        12         14  \n",
       "9            7        20        11         14  "
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cols = ['Capomulin', 'Infubinol', 'Ketapril','Placebo']\n",
    "mouse_group[cols] = (mouse_group[cols]/mouse_group[cols].values[0,:]).multiply(100)\n",
    "mouse_group"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate the Plot (with Error Bars)\n",
    "x= mouse_group[\"Timepoint\"]\n",
    "Capomulin_y = mouse_group[\"Capomulin\"]\n",
    "Infubinol_y = mouse_group[\"Infubinol\"]\n",
    "Ketapril_y = mouse_group[\"Ketapril\"]\n",
    "Placebo_y = mouse_group[\"Placebo\"]\n",
    "\n",
    "plt.plot(x, Capomulin_y, color='red', marker ='o', label=\"Capomulin\")\n",
    "plt.plot(x, Infubinol_y, color='blue', marker ='v', label=\"Infubinol\")\n",
    "plt.plot(x, Ketapril_y, color='green', marker ='s', label=\"Ketapril\")\n",
    "plt.plot(x, Placebo_y, color='black', marker ='d', label=\"Placebo\")\n",
    "\n",
    "plt.xlabel(\"Time (Days)\")\n",
    "plt.ylabel(\"Survival Rate (%)\")\n",
    "plt.title(\"Mouse Survival over Time\")\n",
    "plt.legend(loc=\"best\")\n",
    "plt.grid()\n",
    "\n",
    "# Save the Figure\n",
    "plt.savefig('mouse_survival_rate.png')\n",
    "\n",
    "# Show the Figure\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Summary Bar Graph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calculate the percent changes for each drug\n",
    "percent_change = tr_group_mean.iloc[[0,9],[1,2,4,5,7]]\n",
    "percent_change.columns = ['Timepoint','Capomulin','Infubinol',\n",
    "                     'Ketapril','Placebo']\n",
    "percent_change = percent_change.transpose()\n",
    "percent_change['Percent Change'] = ((percent_change[9]-percent_change[0] )/percent_change[0])*100\n",
    "percent_change = percent_change.drop(columns=[0,9])\n",
    "\n",
    "percent_change['positive'] = percent_change['Percent Change'] > 0\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "percent_change['Percent Change'].plot(kind=\"bar\",color=percent_change.positive.map({True: 'r', False: 'g'}))\n",
    "# Don't allow the axis to be on top of your data\n",
    "ax.set_axisbelow(True)\n",
    "\n",
    "# Customize the grid\n",
    "ax.grid(linestyle='-', linewidth='0.5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Store all Relevant Percent Changes into a Tuple\n",
    "\n",
    "\n",
    "# Splice the data between passing and failing drugs\n",
    "\n",
    "\n",
    "# Orient widths. Add labels, tick marks, etc. \n",
    "\n",
    "\n",
    "# Use functions to label the percentages of changes\n",
    "\n",
    "\n",
    "# Call functions to implement the function calls\n",
    "\n",
    "\n",
    "# Save the Figure\n",
    "\n",
    "\n",
    "# Show the Figure\n",
    "fig.show()"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
